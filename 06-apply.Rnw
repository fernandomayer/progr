
\Sexpr{set_parent('master.tex')}

\SweaveOpts{fig.path='figs/apply-', fig.align='center',
  fig.show='hold', tidy=FALSE, prompt=TRUE, comment=''}


<<echo=FALSE,error=FALSE,results='hide'>>=
rm(list = ls())
@


\progrtitlepage{6}{Vectorizing Computations}
\progrchapternumber{5}
\progrchapter{Vectorizing Computations}
\progrchapterabstract{%
  Programming without explicit loops.
}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
The main literature for this section is:
\begin{itemize}
  \item \textit{R Language Definition} by \citet{Rlang}
  \item \textit{Software for Data Analysis: Programming with R} by
    \citet{Chambers@2008}
  \item \textit{The Art of R Programming} by \citet{Matloff@2011}
\end{itemize}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Vectorization}

The idea of \textbf{vectorizing} comes from the contrast between a
single expression applied to one or more R vectors, compared to a loop
that computes corresponding single values.

For example, the addition of elements of two vectors of equal lengths,
<<>>=
set.seed(1234)
x <- rnorm(5)
y <- runif(5)
@
can be done in R by making use of the vectorization of most of the
operators:
<<>>=
x + y
@
One can think of an \textbf{implicit loop} iterating over the vectors'
elements. We can receive the same result using an \textbf{explicit loop}:
<<>>=
z <- numeric(length(x))
for ( i in seq(along = x) ) {
  z[i] <- x[i] + y[i]
}
z
@
However, the vectorized statement is more compact, more readable and
faster (for ``big'' vectors).

<<cache=TRUE>>=
set.seed(1234)
x <- rnorm(10^6)
y <- runif(10^6)

## Implicit loop:
system.time(x + y)

## Explicit loop:
z <- numeric(length(x))
system.time(for ( i in seq(along = x) ) z[i] <- x[i] + y[i])
@

The implicit loop is much faster then the explicit loop. Even through
R internally loops over the two vectors, this is done in native
machine code---which results in this speedup. \textbf{Therefore,
  whenever it is possible to use R's vectorization, use it!}

One note of caution: be aware of the recycling rules. If one tries to
operate on two vectors with different number of elements, then the
shortest is recycled to length of longest. Only if the length of the
longer vector is not a multiple of the shorter one, a warning is
given.

<<>>=
c(1, 2, 3) + 1:6
c(1, 2, 3) + 1:5
@



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Implicit loops}

Here, we discuss some examples for implicit loops.

\paragraph{Operators.} All operators \rcode{+}, \rcode{-}, etc. (see
\rcode{?Arithmetic}, \rcode{?Comparison}) are vectorized, i.e., an
implicit loop iterates over the two vectors.

For example,
<<>>=
set.seed(1234)
x <- sample(100, 5)
((x %% 2) == 0)
@
returns \rcode{TRUE} if an element of the vector is even, otherwise
\rcode{FALSE}. This statement contains two implicit loops, the first
computes the \rcode{x \%\% 2} and the second \rcode{. == 0}.


\paragraph{Statistical measures.} Most of the common statistical
measures---\rcode{mean()}, \rcode{median()}, \rcode{sd()},
etc.---imply an implicit loop. For example, the arithmetic mean of a
vector $x_i$ $(i = 1, \ldots, n)$ is defined as
\[
  \frac{1}{n} \sum_{i=1}^n x_i\mbox{.}
\]
The sum sign means that we have to loop over the elements to add
them. The R function does this implicitly,
<<>>=
mean(x)
@
Another way with an implicit loop is,
<<>>=
sum(x) / length(x)
@
where \rcode{sum()} loops over the elements to add them. The version
with the explicit loop is:
<<>>=
z <- 0
for ( i in seq(along = x) ) {
  z <- z + x[i]
}
z <- z / length(x)
z
@

In case we have not only a vector but a \rcode{data.frame} we may want
to compute column means. This would imply two loops, one over the
columns, and for each column one loop over the rows. R provides a
function with these two implicit loops,
\rcode{colMeans()}.

<<>>=
data("cars", package = "datasets")
str(cars)
colMeans(cars)
@

\rcode{rowMeans()} is the equivalent for computing row means;
\rcode{rowSums()} and \rcode{colSums} for computing the row and column
sums.


\paragraph{Subsets.} Extractions (or replacements) of subsets, i.e.,
expressions of the form \rcode{x[i]}, contain implicit loops as well.

For example,
<<>>=
set.seed(1234)
x <- letters[1:10]
ind <- sample(100, 10)

x[ind %% 2 == 0]
@
creates the subsets of letters where the corresponding element of the
\rcode{ind} vector is even. Behind the scenes something like the
following explicit loop is happening:
<<>>=
z <- character()
for ( i in seq(along = x) ) {
  if ( ind[i] %% 2 == 0 ) {
    z <- c(z, x[i])
  }
}
z
@

A similar result can be obtained using \rcode{ifelse()} for
conditional element selection.
<<>>=
ifelse(test = ind %% 2 == 0, yes = x, no = NA)
@
The result is a vector with the same length as \rcode{test} which is
filled with elements selected from either \rcode{yes} or \rcode{no}
depending on whether the element of \rcode{test} is \rcode{TRUE} or
\rcode{FALSE}.


\paragraph{Matrix computations.} This concept expands to
two- (\rcode{matrix}) and higher- (\rcode{array}) dimensional
structures as well. Obvious examples are matrix multiplication,
transposition and subsetting.

For example, the transposition of a $n \times m$ matrix,
<<>>=
set.seed(1234)
A <- matrix(sample(10), ncol = 2)
A
t(A)
@
would consist of two explicit loops over each row of each column:
<<>>=
n <- nrow(A)
m <- ncol(A)
At <- matrix(NA, nrow = m, ncol = n)
for ( i in seq(length = n) ) {
  for ( j in seq(length = m) ) {
    At[j, i] <- A[i, j]
  }
}
At
@



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{The \rcode{apply}-family}

One common task is to repeatedly call a function for all of the
elements of a vector, or for all of the rows or columns of a matrix or
\rcode{data.frame} (in fact, for all of the dimensions of an array)
and to collect the results. The \rcode{apply}-family provides
functions for this task.

The main reasons to prefer using the \rcode{apply}-family to an
explicit loop are:
\begin{enumerate}
  \item The computation becomes more compact and clearer. (often true)
  \item The computation is easily parallelizable. (always true; see
    the \rcode{plyr} package)
  \item The computation should run faster. \citep[problematic
    statement; see the discussion by][p.~213]{Chambers@2008}
\end{enumerate}


\paragraph{Apply a function over a list or vector.} Let us start with
a simple (and artificial) example. Given is the following function
<<>>=
ab <- function(x) {
  if ( x < 10 ) {
    "a"
  } else {
    "b"
  }
}
@
which returns the character \rcode{"a"} if the argument \rcode{x} is
smaller than $10$, and \rcode{"b"} otherwise.
<<>>=
ab(4)
ab(20)
@
Because of the nature of the \rcode{if-else} control structure, this
function cannot be correctly applied to a vector:
<<>>=
ab(5:15)
@
Only the first element of the vector will be used. In order to apply
the function to each element of the vector, we have to use one of the
functions \rcode{sapply()} or \rcode{lapply()}:
<<>>=
sapply(5:15, ab)
@
The result is then a vector with the same length as the input
vector. Each element is the result of applying the function to the
corresponding element in the input vector. Note that \rcode{lapply()}
will always return a \rcode{list}, whereas \rcode{sapply()} tries to
simplify the result to a vector, matrix or higher dimensional array.

A (slightly) more realistic example is that a list with results from
different runs of an experiment are given:
<<>>=
set.seed(1234)
l <- list(exp1 = rnorm(100),
          exp2 = rnorm(100),
          exp3 = rnorm(100))
@
If we now want to compute the mean for each element, we can do this,
for example, by hand:
<<>>=
c(mean(l$exp1),
  mean(l$exp2),
  mean(l$exp3))
@
This works as long as the list has not too many elements. If this is
the case, we can write an explicit loop:
<<>>=
ms <- numeric(length = length(l))
for ( i in seq(along = l) ) {
  ms[i] <- mean(l[[i]])
}
ms
@
This works. It is, however, a lot of (error-prone) code for such a
simple task. Using the \rcode{apply}-family simplifies this task a
lot---it reduces to:
<<>>=
sapply(l, mean)
@

We will see the difference between \rcode{sapply()} and
\rcode{lapply()} when we compute a function with a vector as result;
for example, the \rcode{quantile()} function. \rcode{lapply()},
<<>>=
lapply(l, quantile)
@
returns a list of quantiles, whereas \rcode{sapply()},
<<>>=
sapply(l, quantile)
@
simplifies the list of quantiles to a matrix.


\seealso{
  \rcode{mapply()} is a multivariate version of \rcode{sapply()}.
}



\paragraph{Apply a function over a matrix, an array, or a
  \rcode{data.frame}.} The function \rcode{apply()} allows to call a
function for each dimension of a matrix, an array, or a
\rcode{data.frame}.

If we, for example, want to find the maximum element for each row and
column of the \rcode{cars} data set, we can write two explicit loops
or use \rcode{apply()}:
<<>>=
data("cars", package = "datasets")

apply(cars, 1, which.max)
apply(cars, 2, which.max)
@
The \rcode{MARGIN} argument gives the subscripts which the function
will be applied over; e.g., \rcode{1} means the first dimension (i.e.,
rows), \rcode{2} means the second dimension (i.e., columns),
\rcode{c(1, 2)} means rows and columns (i.e., cells).

Note that \rcode{data.frame}s are in fact lists of equal-length
vectors (one list element for each column). Therefore,
\rcode{lapply()} will work as well and apply a function on each column
of a \rcode{data.frame}.


\paragraph{The \rcode{plyr} package.} The \rcode{plyr} package by
H.~Wickham provides a sound generalization of the \rcode{apply}-family
with parallelization.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Anonymous functions}

A important concept in combination with the \rcode{apply}-family, is
the concept of anonymous functions. An anyomous function is a function
object which is not assigned to an identifier.

For example,
<<>>=
function(x) {
  x + 1
}
@
creates a ``function object which has no name''. In this case, the
object somehow gets lost and is not usable. Nevertheless, this concept
is useful for defining functions which are only used for one
\rcode{apply}-family function call.

For example, the function \rcode{ab()} we defined above. Imagine we
need this function only once, therefore we can define this function as
an anoymous function directly in the \rcode{sapply()} call:

<<>>=
sapply(5:15,
       function(x) {
         if ( x < 10 ) {
           "a"
         } else {
           "b"
         }
       })
@



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Functional programming}

\rcode{?funprog}
higher-order functions




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\bibliographystyle{plainnat}
\bibliography{references}
