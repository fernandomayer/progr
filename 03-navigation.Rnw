
\Sexpr{set_parent('master.tex')}

\SweaveOpts{fig.path='figs/navigation-', fig.align='center',
  fig.show='hold', tidy=FALSE, prompt=TRUE, comment=''}

<<echo=FALSE>>=
rm(list = ls())
detach("package:stats4")
@


\progrtitlepage{3}{Navigate through R}
\progrchapternumber{2}
\progrchapter{Navigate through R}
\progrchapterabstract{%
First steps in finding, reading, understanding, etc. R objects.
}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
The main literature for this section is:
\begin{itemize}
  \item \textit{Software for Data Analysis: Programming with R} by
    \citet{Chambers@2008}
  \item \textit{R Language Definition} by \citet{Rlang}
  \item \textit{R Help Desk: Accessing the Sources} by \citet{Ligges@2006}
\end{itemize}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Global environment}

Everything starts in the \textbf{\vocab{global environment}}. It is
the root of the user workspace and an assignment operation from the
command line will cause the relevant object to belong to the global
environment.

<<>>=
x <- 1
ls()
@

Now, R uses different concepts---\vocab{packages}, \vocab{namespaces},
\vocab{search paths}, \vocab{generic methods}, etc.---to make R usable
for the users. However, these concepts make it harder to navigate
through R---one has to have a basic understanding of the concepts to
orient oneself.

For example, the \rcode{identity()} function is not listed in the
objects listing above, nevertheless it is available and usable:
<<>>=
identity(1)
@

The \rcode{identity()} function is defined in the package:
<<>>=
find("identity")
@
It is available to the user because R maintains a \textbf{search
  path} of attached packages
<<>>=
search()
@
and looks up the function by name first in the global environment and
then successively in the parent environments. Attaching or detaching a
package obviously changes the search path.

The global environment object is accessible via the
\rcode{globalenv()} function.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Search Path}

Be it that one has defined an object \rcode{identity} at the global
environment:
<<>>=
identity <- 17
@
Then, obviously, two objects are found:
<<>>=
find("identity")
@
One defined in the global environment, and one in the \rcode{base}
package. Because of the chain of environments, the object in the
global environment is found first:
<<>>=
identity
@
In order to use the function in the \rcode{base} package, the
\textbf{double colon operator} \rcode{::} has to be used:
<<>>=
base::identity(10)
@

In consequence, removing the \rcode{identity} object, removes the
object in the global environment:
<<>>=
rm(identity)
ls()
@
Note that removing an object within a package (e.g.,
\rcode{rm(base::identity)}) is not allowed.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Packages}

Similarly to the collection of the user-defined objects in the global
environment, the objects defined by a package are collected in an
environment as well. This becomes visible when printing the source
code of a function:
<<>>=
identity
@
The last line prints the environment in which the function is defined.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Namespaces}

In contrast to the global environment, not all objects of a package
have to be visible to the user. The \textbf{namespace management
  system} for packages allows the package author to specify, among
other things, which objects in the package should be \textbf{exported}
to make them available to package users.

<<results='hide'>>=
library("HSAUR2")
@

In order to see the exported one has to get the namespace environment
of a package via the \rcode{getNamespace()} function,
<<>>=
ns <- getNamespace("HSAUR2")
@
and can then receive a list of all exported objects via the
\rcode{getNamespaceExports()} function:
<<>>=
getNamespaceExports(ns)
@
This package has only one object exported. We can access the exported
objects of a loaded and attached package as customary by entering its
name
<<>>=
HSAURtable
@
or, more precisely, with the double colon operator
\rcode{HSAUR2::HSAURtable}.

As a namespace is also an environment, we can simply get a list of all
defined objects:
<<>>=
ls(envir = ns)
@
Non-exported objects, like \rcode{exename}, can not be accessed with
the double colon operator
<<>>=
HSAUR2::exename
@
but with the \textbf{triple colon operator} \rcode{:::}
<<>>=
HSAUR2:::exename
@

However, notice that there is a reason why objects are not
exported. One can not be sure that the object behaves equally in the
next version of the package (or even exists anymore). Furthermore,
documentation is only required for exported objects.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Generic functions (S3)}

Given are two vectors, one of storage type \rcode{numeric} and one of
storage type \rcode{factor}:
<<>>=
a <- runif(10)
b <- gl(5, 2)
@
If we plot the two vectors, the same function calls results in
different results---one scatterplot and one barplot:
<<fig.keep='last', fig.width=5, fig.height=2>>=
par(mfrow = c(1, 2), mar = c(4, 4, 1, 0))
plot(a)
plot(b)
@
Calling the documentation \rcode{?plot} also only gives very general
information.

The function \rcode{plot()} is, in fact, a \textbf{generic function}
in the \textbf{S3} object system. This is a very simple mechanism for
an object-oriented style of programming. The concrete executing
function---now called a \textbf{method}---is determined by the class
of the first argument.

Now, the classes of the two exemplar vectors are:
<<>>=
class(a)
class(b)
@
Note that in this example the classes are equal to the type of the
storage mode (\rcode{typeof()}) but this has not to be the case in
general.

Generic functions are identifiable by the code line
\rcode{UseMethod("...")} in their function body:
<<>>=
plot
@
As one can see, no real computation is done in this generic
function. Here, the \rcode{UseMethod()} function just determines the
method to be \textbf{dispatched}.

All available plotting methods are determined by the function
\rcode{methods()}:
<<>>=
methods("plot")
@
The naming scheme of S3 methods is \rcode{function.class}, where
\rcode{class} is the class of the first argument. There are several
plotting methods available; e.g., for the classes \rcode{data.frame},
\rcode{lm}, and also \rcode{factor}. However, there is not method for
the class \rcode{numeric}. In such a case, the default method
\rcode{plot.default} is executed.

Knowing this, the appropriate documentation can be opened:
<<eval=FALSE>>=
?plot.factor
?plot.default
@

To see the source code of the methods, the functions
\rcode{getS3method()} and \rcode{getAnywhere()} are available:
<<eval=FALSE>>=
getS3method("plot", "factor")
getAnywhere("plot.factor")
@
If we know the package, we can also use the double (if the method is
visible) or the triple (if the function is non-visible) colon
operators; e.g.:
<<eval=FALSE>>=
graphics:::plot.factor
@



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Print Objects (S3)}

This mechanism is also used to show meaningful representations of
objects. When an object is required
<<>>=
x
@
implicitly the appropriate \rcode{print()}-method based on the class
of the object is executed
<<>>=
print(x)
@
Execute \rcode{methods("print")} to see the available printing
methods; and see \rcode{?print} and \rcode{?print.default} for
possible additional adjustments for printing objects.

Note that most \rcode{summary()} methods use this possibility in a
very elegant way. Look, for example, at the \rcode{summary.lm()} and
the \rcode{print.summary.lm()} methods.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Generic functions (S4)}

The \rcode{methods} package provides a second object system. It is
more formal---however, at first we can think of it as an extension of
the S3 system where more arguments than only the first argument can be
used for method dispatching.

The \rcode{stats4} package introduces some basic statistical functions
based on the S4 system.

<<>>=
library("stats4")
@

The definition of generic functions in the \rcode{S4} system looks
slightly different; enter \rcode{coef} or
<<>>=
show(coef)
@
Here, the indicating line is \rcode{standardGeneric("...")}. As
denoted in the output, S4 \rcode{coef()} methods are listed using the
\rcode{showMethods()} function:
<<>>=
showMethods("coef")
@
Currently, there is a \rcode{coef()} method available for objects of
the classes \rcode{mle}, \rcode{summary.mle}, and the default
\rcode{ANY}.

Use \rcode{getMethod()} to see the source of the methods; the first
argument is the method name, the second argument the signature, i.e.,
the classes of the relevent arguments.

<<>>=
getMethod("coef", "mle")
@



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\bibliographystyle{plainnat}
\bibliography{references}
